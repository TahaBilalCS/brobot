generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model TwitchBotAuth {
  id              String     @id @default(uuid())
  accessToken     String
  refreshToken    String
  scope           String[]
  createdDate     DateTime   @default(now())
  expirySeconds   Int
  userOauthId     String     @unique
  updatedDate     DateTime   @updatedAt
  obtainmentEpoch BigInt
  twitchUser      TwitchUser @relation(fields: [userOauthId], references: [oauthId], onDelete: Cascade)
}

model TwitchStreamerAuth {
  id              String     @id @default(uuid())
  accessToken     String
  refreshToken    String
  scope           String[]
  createdDate     DateTime   @default(now())
  expirySeconds   Int
  userOauthId     String     @unique
  updatedDate     DateTime   @updatedAt
  obtainmentEpoch BigInt
  twitchUser      TwitchUser @relation(fields: [userOauthId], references: [oauthId], onDelete: Cascade)
}

/// Made an account on brobot.live
model TwitchUserRegistered {
  id              String     @id @default(uuid())
  userOauthId     String     @unique
  email           String?
  profileImageUrl String
  scope           String[]
  updatedDate     DateTime   @updatedAt
  originDate      DateTime
  registeredDate  DateTime   @default(now())
  twitchUser      TwitchUser @relation(fields: [userOauthId], references: [oauthId], onDelete: Cascade)
}

model TwitchUser {
  oauthId                String                @id @unique
  displayName            String
  /// Below - Optional
  createdDate            DateTime              @default(now())
  roles                  String[]              @default(["Viewer"])
  updatedDate            DateTime              @updatedAt
  pokemon                Pokemon[]
  pokemonTeam            PokemonTeam?
  registeredBotAuth      TwitchBotAuth?
  registeredStreamerAuth TwitchStreamerAuth?
  registeredUser         TwitchUserRegistered?
}

model PokemonTeam {
  id          String     @id @default(uuid())
  userOauthId String     @unique
  createdDate DateTime   @default(now())
  updatedDate DateTime   @updatedAt
  twitchUser  TwitchUser @relation(fields: [userOauthId], references: [oauthId], onDelete: Cascade)
  pokemon     Pokemon[]
}

model Pokemon {
  id          String       @id @default(uuid())
  name        String
  nameId      String
  /// Look into "check constraints" (in pgAdmin) to limit slot number to 0-6
  slot        Int
  level       Int          @default(1)
  /// 1/8192 chance but we'll do 1/250
  shiny       Boolean
  wins        Int          @default(0)
  losses      Int          @default(0)
  draws       Int          @default(0)
  item        String       @default("")
  moves       String[]
  dexNum      Int
  color       String
  types       String[]
  /// 'M', 'F', or 'N'
  gender      String
  nature      String
  ability     String
  teamId      String?
  userOauthId String
  createdDate DateTime     @default(now())
  updatedDate DateTime     @updatedAt
  team        PokemonTeam? @relation(fields: [teamId], references: [id])
  twitchUser  TwitchUser   @relation(fields: [userOauthId], references: [oauthId], onDelete: Cascade)
}

model PokemonBattleOutcome {
  id          String   @id @default(uuid())
  updatedDate DateTime @updatedAt
  outcome     String[]
}

model PokemonTeamBattleOutcome {
  id          String   @id @default(uuid())
  updatedDate DateTime @updatedAt
  outcome     String[]
}
