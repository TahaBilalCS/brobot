generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model TwitchBotAuth {
  id              String     @id @default(uuid())
  accessToken     String
  refreshToken    String
  scope           String[]
  obtainmentEpoch Int
  createdDate     DateTime   @default(now())
  expirySeconds   Int
  twitchUserId    String     @unique
  updatedDate     DateTime   @updatedAt
  twitchUser      TwitchUser @relation(fields: [twitchUserId], references: [id], onDelete: Cascade)
}

model TwitchStreamerAuth {
  id              String     @id @default(uuid())
  accessToken     String
  refreshToken    String
  scope           String[]
  obtainmentEpoch Int
  createdDate     DateTime   @default(now())
  expirySeconds   Int
  twitchUserId    String     @unique
  updatedDate     DateTime   @updatedAt
  twitchUser      TwitchUser @relation(fields: [twitchUserId], references: [id], onDelete: Cascade)
}

/// Made an account on admin.brobot.live
model TwitchUserRegistered {
  id              String     @id @default(uuid())
  twitchUserId    String     @unique
  email           String?
  profileImageUrl String
  scope           String[]
  updatedDate     DateTime   @updatedAt
  originDate      DateTime
  registeredDate  DateTime   @default(now())
  twitchUser      TwitchUser @relation(fields: [twitchUserId], references: [id], onDelete: Cascade)
}

model TwitchUser {
  id                     String                @id @default(uuid())
  oauthId                String                @unique
  displayName            String
  createdDate            DateTime              @default(now())
  roles                  String[]              @default(["Viewer"])
  updatedDate            DateTime              @updatedAt
  pokemon                Pokemon[]
  pokemonTeam            PokemonTeam?
  registeredBotAuth      TwitchBotAuth?
  registeredStreamerAuth TwitchStreamerAuth?
  registeredUser         TwitchUserRegistered?
}

model PokemonTeam {
  id           String     @id @default(uuid())
  twitchUserId String     @unique
  twitchUser   TwitchUser @relation(fields: [twitchUserId], references: [oauthId], onDelete: Cascade)
  pokemon      Pokemon[]
}

model Pokemon {
  id           String       @id @default(uuid())
  name         String
  slot         Int
  teamId       String?
  twitchUserId String
  /// level         Int          @default(1)
  /// shiny         Boolean /// 1/8192 chance but we'll do 1/250
  /// Look into "check constraints" (in pgAdmin) to limit slot number to 0-6
  /// wins          Int          @default(0)
  /// losses        Int          @default(0)
  /// draws         Int          @default(0)
  /// nameId        String
  team         PokemonTeam? @relation(fields: [teamId], references: [id])
  twitchUser   TwitchUser   @relation(fields: [twitchUserId], references: [id], onDelete: Cascade)
}
